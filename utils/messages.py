from datetime import datetime, time
from telegram.ext import ContextTypes

from utils.chats import load_chats, remove_chat
from utils.setup import TIMEZONE


def days_until_new_year():
    """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –ù–æ–≤–æ–≥–æ –≥–æ–¥–∞"""
    now = datetime.now(TIMEZONE)
    current_year = now.year

    # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è 31 –¥–µ–∫–∞–±—Ä—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 0 –¥–Ω–µ–π
    new_year = datetime(current_year + 1, 1, 1, tzinfo=TIMEZONE)

    days_left = (new_year.date() - now.date()).days
    return days_left


def word_after_number(days: int) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    last_digit = days % 10
    last_two_digits = days % 100

    if last_digit == 1 and last_two_digits != 11:
        return '–¥–µ–Ω—å'
    elif last_digit in [2, 3, 4] and last_two_digits not in [12, 13, 14]:
        return '–¥–Ω—è'
    else:
        return '–¥–Ω–µ–π'


def countdown_message():
    """–°–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    days = days_until_new_year()
    word = word_after_number(days)
    last_digit = days % 10
    last_two_digits = days % 100
    if days == 0:
        message = "üéâ –° –ù–æ–≤—ã–º –ì–æ–¥–æ–º! üéä"
    elif last_digit == 1 and last_two_digits != 11:
        message = f"üéÑ –û—Å—Ç–∞–ª—Å—è –≤—Å–µ–≥–æ {days} {word} –¥–æ –ù–æ–≤–æ–≥–æ –≥–æ–¥–∞! üéÖ"
    elif last_digit in [2, 3, 4] and last_two_digits not in [12, 13, 14]:
        message = f"üéÑ –û—Å—Ç–∞–ª–æ—Å—å {days} {word} –¥–æ –ù–æ–≤–æ–≥–æ –≥–æ–¥–∞! üéÖ"
    else:
        message = f"üéÑ –û—Å—Ç–∞–ª–æ—Å—å {days} {word} –¥–æ –ù–æ–≤–æ–≥–æ –≥–æ–¥–∞! üéÖ"
    return message


async def send_daily_message(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–Ω–µ–π –¥–æ –ù–ì –≤–æ –≤—Å–µ —á–∞—Ç—ã"""
    message = countdown_message()

    chats = load_chats()
    current_time = datetime.now(TIMEZONE).time()
    success_count = 0
    failed_chats = []

    for chat in chats:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç —Å–µ–π—á–∞—Å
        time_start = chat.get('time_start', '09:00')
        time_end = chat.get('time_end', '09:00')

        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
        start_hour, start_min = map(int, time_start.split(':'))
        end_hour, end_min = map(int, time_end.split(':'))

        start_time = time(hour=start_hour, minute=start_min)
        end_time = time(hour=end_hour, minute=end_min)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω
        should_send = False
        if start_time == end_time:
            # –¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è (—Å –¥–æ–ø—É—Å–∫–æ–º 1 –º–∏–Ω—É—Ç–∞)
            if abs((current_time.hour * 60 + current_time.minute) - (start_hour * 60 + start_min)) <= 1:
                should_send = True
        else:
            # –î–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏
            if start_time <= end_time:
                # –û–±—ã—á–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
                if start_time <= current_time <= end_time:
                    should_send = True
            else:
                # –î–∏–∞–ø–∞–∑–æ–Ω —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å
                if current_time >= start_time or current_time <= end_time:
                    should_send = True

        if not should_send:
            continue

        try:
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            send_params = {
                'chat_id': chat['id'],
                'text': message
            }

            # –ï—Å–ª–∏ –µ—Å—Ç—å thread_id, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            if chat.get('thread_id'):
                send_params['message_thread_id'] = chat['thread_id']

            await context.bot.send_message(**send_params)
            success_count += 1

            thread_info = f" (—Ç–µ–º–∞: {chat['thread_id']})" if chat.get('thread_id') else ""
            print(f"[{datetime.now(TIMEZONE)}] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {chat['title']}{thread_info} ({chat['id']})")
        except Exception as e:
            print(f"[{datetime.now(TIMEZONE)}] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ {chat['title']} ({chat['id']}): {e}")
            failed_chats.append((chat['id'], chat.get('thread_id')))

    # –£–¥–∞–ª—è–µ–º —á–∞—Ç—ã, –∫—É–¥–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
    for chat_id, thread_id in failed_chats:
        remove_chat(chat_id, thread_id)

    if success_count > 0:
        print(f"[{datetime.now(TIMEZONE)}] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {success_count} —á–∞—Ç–æ–≤")