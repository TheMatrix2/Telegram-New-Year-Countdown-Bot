from datetime import datetime, time
from telegram.ext import ContextTypes

from utils.chats import load_chats, remove_chat, generate_random_time, save_chats
from utils.setup import TIMEZONE


def days_until_new_year():
    """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –ù–æ–≤–æ–≥–æ –≥–æ–¥–∞"""
    now = datetime.now(TIMEZONE)
    current_year = now.year

    # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è 31 –¥–µ–∫–∞–±—Ä—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 0 –¥–Ω–µ–π
    new_year = datetime(current_year + 1, 1, 1, tzinfo=TIMEZONE)

    days_left = (new_year.date() - now.date()).days
    return days_left


def word_after_number(days: int) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    last_digit = days % 10
    last_two_digits = days % 100

    if last_digit == 1 and last_two_digits != 11:
        return '–¥–µ–Ω—å'
    elif last_digit in [2, 3, 4] and last_two_digits not in [12, 13, 14]:
        return '–¥–Ω—è'
    else:
        return '–¥–Ω–µ–π'


def countdown_message():
    """–°–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    days = days_until_new_year()
    word = word_after_number(days)
    last_digit = days % 10
    last_two_digits = days % 100
    if days == 0:
        message = "üéâ –° –ù–æ–≤—ã–º –ì–æ–¥–æ–º! üéä"
    elif last_digit == 1 and last_two_digits != 11:
        message = f"üéÑ –û—Å—Ç–∞–ª—Å—è –≤—Å–µ–≥–æ {days} {word} –¥–æ –ù–æ–≤–æ–≥–æ –≥–æ–¥–∞! üéÖ"
    elif last_digit in [2, 3, 4] and last_two_digits not in [12, 13, 14]:
        message = f"üéÑ –û—Å—Ç–∞–ª–æ—Å—å {days} {word} –¥–æ –ù–æ–≤–æ–≥–æ –≥–æ–¥–∞! üéÖ"
    else:
        message = f"üéÑ –û—Å—Ç–∞–ª–æ—Å—å {days} {word} –¥–æ –ù–æ–≤–æ–≥–æ –≥–æ–¥–∞! üéÖ"
    return message


async def send_daily_message(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–Ω–µ–π –¥–æ –ù–ì –≤–æ –≤—Å–µ —á–∞—Ç—ã"""
    message = countdown_message()

    chats = load_chats()
    current_time = datetime.now(TIMEZONE)
    current_time_str = current_time.strftime("%H:%M")
    today_date = current_time.date().isoformat()
    success_count = 0
    failed_chats = []
    updated = False

    for chat in chats:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è
        if chat.get('last_sent_date') == today_date:
            continue

        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
        send_time = chat.get('random_time', '09:00')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å –≤—Ä–µ–º–µ–Ω–µ–º –æ—Ç–ø—Ä–∞–≤–∫–∏ (—Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ –º–∏–Ω—É—Ç—ã)
        if send_time != current_time_str:
            continue

        try:
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            send_params = {
                'chat_id': chat['id'],
                'text': message
            }

            # –ï—Å–ª–∏ –µ—Å—Ç—å thread_id, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            if chat.get('thread_id'):
                send_params['message_thread_id'] = chat['thread_id']

            await context.bot.send_message(**send_params)
            success_count += 1

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            chat['last_sent_date'] = today_date

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞
            time_start = chat.get('time_start', '09:00')
            time_end = chat.get('time_end', '09:00')
            chat['random_time'] = generate_random_time(time_start, time_end)

            updated = True

            thread_info = f" (—Ç–µ–º–∞: {chat['thread_id']})" if chat.get('thread_id') else ""
            next_time_info = f", —Å–ª–µ–¥—É—é—â–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ {chat['random_time']}" if time_start != time_end else ""
            print(
                f"[{current_time}] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {chat['title']}{thread_info} ({chat['id']}){next_time_info}")
        except Exception as e:
            print(f"[{current_time}] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ {chat['title']} ({chat['id']}): {e}")
            failed_chats.append((chat['id'], chat.get('thread_id')))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –µ—Å–ª–∏ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
    if updated:
        save_chats(chats)

    # –£–¥–∞–ª—è–µ–º —á–∞—Ç—ã, –∫—É–¥–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
    for chat_id, thread_id in failed_chats:
        remove_chat(chat_id, thread_id)

    if success_count > 0:
        print(f"[{current_time}] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {success_count} —á–∞—Ç–æ–≤")