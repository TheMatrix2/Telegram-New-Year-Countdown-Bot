from datetime import datetime

from telegram import Update
from telegram.ext import ContextTypes

from utils.chats import add_chat, days_until_new_year, remove_chat
from utils.messages import word_after_number, countdown_message
from utils.setup import TIMEZONE


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç —á–∞—Ç –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    days = days_until_new_year()
    chat_id = update.effective_chat.id
    chat_type = update.effective_chat.type
    chat_title = update.effective_chat.title if hasattr(update.effective_chat,
                                                        'title') else f"–õ–∏—á–Ω—ã–π —á–∞—Ç ({update.effective_user.first_name})"

    # –ü–æ–ª—É—á–∞–µ–º thread_id –µ—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–º–µ
    message_thread_id = update.effective_message.message_thread_id if update.effective_message.is_topic_message else None

    # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ —Å–ø–∏—Å–æ–∫
    is_new = add_chat(chat_id, chat_type, chat_title, message_thread_id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–º–µ
    thread_info = ""
    if message_thread_id:
        topic_name = "—ç—Ç—É —Ç–µ–º—É"
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã
            forum_topic = await context.bot.get_forum_topic_icon_stickers(chat_id)
            topic_name = f"—Ç–µ–º—É (ID: {message_thread_id})"
        except:
            pass
        thread_info = f"\nüìå –°–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ {topic_name}"

    # –õ–æ–≥–∏—Ä—É–µ–º
    log_thread = f" [—Ç–µ–º–∞: {message_thread_id}]" if message_thread_id else ""
    print(
        f"[{datetime.now(TIMEZONE)}] /start –æ—Ç {chat_title}{log_thread} ({chat_id}, {chat_type}) - {'–Ω–æ–≤—ã–π —á–∞—Ç' if is_new else '—É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω'}")

    if is_new:
        message = (
            f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—é–¥–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –ù–æ–≤–æ–≥–æ –≥–æ–¥–∞.\n\n"
            f"–°–µ–π—á–∞—Å –¥–æ –ù–æ–≤–æ–≥–æ –≥–æ–¥–∞: {days} {word_after_number(days)} üéÑ\n\n"
            f"–ö–æ–º–∞–Ω–¥—ã:\n"
            f"/check - —É–∑–Ω–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å\n"
            f"/stop - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
            f"/chatid - —É–∑–Ω–∞—Ç—å ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞"
        )
    else:
        message = (
            f"–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è! ‚úÖ\n\n"
            f"–î–æ –ù–æ–≤–æ–≥–æ –≥–æ–¥–∞: {days} {word_after_number(days)} üéÑ\n\n"
            f"–ö–æ–º–∞–Ω–¥—ã:\n"
            f"/check - —É–∑–Ω–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å\n"
            f"/stop - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
        )

    if chat_type in ['group', 'supergroup']:
        message += "\n\nüìå –≠—Ç–æ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π."

    await update.message.reply_text(message)


async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop - –æ—Ç–ø–∏—Å—ã–≤–∞–µ—Ç —á–∞—Ç –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    chat_id = update.effective_chat.id
    chat_title = update.effective_chat.title if hasattr(update.effective_chat,
                                                        'title') else f"–õ–∏—á–Ω—ã–π —á–∞—Ç ({update.effective_user.first_name})"
    message_thread_id = update.effective_message.message_thread_id if update.effective_message.is_topic_message else None

    remove_chat(chat_id, message_thread_id)

    thread_info = f" [—Ç–µ–º–∞: {message_thread_id}]" if message_thread_id else ""
    print(f"[{datetime.now(TIMEZONE)}] /stop –æ—Ç {chat_title}{thread_info} ({chat_id})")

    topic_text = " –∏–∑ —ç—Ç–æ–π —Ç–µ–º—ã" if message_thread_id else ""
    await update.message.reply_text(
        f"üò¢ –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π{topic_text}.\n\n"
        "–ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start"
    )


async def check_now(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /check - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π"""
    message = countdown_message()

    await update.message.reply_text(message)


async def get_chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /chatid - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç ID —á–∞—Ç–∞ –∏ —Ç–µ–º—ã"""
    chat_id = update.effective_chat.id
    chat_type = update.effective_chat.type
    chat_title = update.effective_chat.title if hasattr(update.effective_chat, 'title') else "–õ–∏—á–Ω—ã–π —á–∞—Ç"
    message_thread_id = update.effective_message.message_thread_id if update.effective_message.is_topic_message else None

    message = (
        f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:\n\n"
        f"Chat ID: `{chat_id}`\n"
        f"–¢–∏–ø: {chat_type}\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {chat_title}"
    )

    if message_thread_id:
        message += f"\n\nüßµ –¢–µ–º–∞ (Topic):\nThread ID: `{message_thread_id}`"
        message += f"\n\nüí° –°–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∏–º–µ–Ω–Ω–æ –≤ —ç—Ç—É —Ç–µ–º—É"

    await update.message.reply_text(message, parse_mode='Markdown')