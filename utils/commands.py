from datetime import datetime

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from utils.chats import add_chat, remove_chat, update_chat_time
from utils.messages import days_until_new_year, word_after_number, countdown_message
from utils.setup import TIMEZONE


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç —á–∞—Ç –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    days = days_until_new_year()
    chat_id = update.effective_chat.id
    chat_type = update.effective_chat.type
    chat_title = update.effective_chat.title if hasattr(update.effective_chat,
                                                        'title') else f"–õ–∏—á–Ω—ã–π —á–∞—Ç ({update.effective_user.first_name})"

    # –ü–æ–ª—É—á–∞–µ–º thread_id –µ—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–º–µ
    message_thread_id = update.effective_message.message_thread_id if update.effective_message.is_topic_message else None

    # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ —Å –≤—Ä–µ–º–µ–Ω–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    is_new = add_chat(chat_id, chat_type, chat_title, message_thread_id, "09:00", "09:00")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–º–µ
    thread_info = ""
    if message_thread_id:
        topic_name = "—ç—Ç—É —Ç–µ–º—É"
        thread_info = f"\nüìå –°–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ {topic_name}"

    # –õ–æ–≥–∏—Ä—É–µ–º
    log_thread = f" [—Ç–µ–º–∞: {message_thread_id}]" if message_thread_id else ""
    print(
        f"[{datetime.now(TIMEZONE)}] /start –æ—Ç {chat_title}{log_thread} ({chat_id}, {chat_type}) - {'–Ω–æ–≤—ã–π —á–∞—Ç' if is_new else '—É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω'}")

    if is_new:
        message = (
            f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—é–¥–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –ù–æ–≤–æ–≥–æ –≥–æ–¥–∞.{thread_info}\n\n"
            f"–°–µ–π—á–∞—Å –¥–æ –ù–æ–≤–æ–≥–æ –≥–æ–¥–∞: {days} {word_after_number(days)} üéÑ\n\n"
            f"‚è∞ –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ 09:00\n"
            f"–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è: /settime\n\n"
            f"–î—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            f"/check - —É–∑–Ω–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å\n"
            f"/stop - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
            f"/chatid - —É–∑–Ω–∞—Ç—å ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞"
        )
    else:
        message = (
            f"–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è! ‚úÖ{thread_info}\n\n"
            f"–î–æ –ù–æ–≤–æ–≥–æ –≥–æ–¥–∞: {days} {word_after_number(days)} üéÑ\n\n"
            f"–ö–æ–º–∞–Ω–¥—ã:\n"
            f"/settime - –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏\n"
            f"/check - —É–∑–Ω–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å\n"
            f"/stop - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
        )

    if chat_type in ['group', 'supergroup']:
        message += "\n\nüìå –≠—Ç–æ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π."

    await update.message.reply_text(message)


async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop - –æ—Ç–ø–∏—Å—ã–≤–∞–µ—Ç —á–∞—Ç –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    chat_id = update.effective_chat.id
    chat_title = update.effective_chat.title if hasattr(update.effective_chat,
                                                        'title') else f"–õ–∏—á–Ω—ã–π —á–∞—Ç ({update.effective_user.first_name})"
    message_thread_id = update.effective_message.message_thread_id if update.effective_message.is_topic_message else None

    remove_chat(chat_id, message_thread_id)

    thread_info = f" [—Ç–µ–º–∞: {message_thread_id}]" if message_thread_id else ""
    print(f"[{datetime.now(TIMEZONE)}] /stop –æ—Ç {chat_title}{thread_info} ({chat_id})")

    topic_text = " –∏–∑ —ç—Ç–æ–π —Ç–µ–º—ã" if message_thread_id else ""
    await update.message.reply_text(
        f"üò¢ –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π{topic_text}.\n\n"
        "–ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start"
    )


async def check_now(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /check - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π"""
    message = countdown_message()

    await update.message.reply_text(message)


async def get_chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /chatid - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç ID —á–∞—Ç–∞ –∏ —Ç–µ–º—ã"""
    chat_id = update.effective_chat.id
    chat_type = update.effective_chat.type
    chat_title = update.effective_chat.title if hasattr(update.effective_chat, 'title') else "–õ–∏—á–Ω—ã–π —á–∞—Ç"
    message_thread_id = update.effective_message.message_thread_id if update.effective_message.is_topic_message else None

    message = (
        f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:\n\n"
        f"Chat ID: `{chat_id}`\n"
        f"–¢–∏–ø: {chat_type}\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {chat_title}"
    )

    if message_thread_id:
        message += f"\n\nüßµ –¢–µ–º–∞ (Topic):\nThread ID: `{message_thread_id}`"
        message += f"\n\nüí° –°–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∏–º–µ–Ω–Ω–æ –≤ —ç—Ç—É —Ç–µ–º—É"

    await update.message.reply_text(message, parse_mode='Markdown')


async def set_time_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏"""
    keyboard = [
        [
            InlineKeyboardButton("–£—Ç—Ä–æ (08:00-10:00)", callback_data="time_preset_08:00-10:00"),
            InlineKeyboardButton("–î–µ–Ω—å (12:00-14:00)", callback_data="time_preset_12:00-14:00"),
        ],
        [
            InlineKeyboardButton("–í–µ—á–µ—Ä (18:00-20:00)", callback_data="time_preset_18:00-20:00"),
            InlineKeyboardButton("–ù–æ—á—å (22:00-00:00)", callback_data="time_preset_22:00-00:00"),
        ],
        [
            InlineKeyboardButton("‚öôÔ∏è –£–∫–∞–∑–∞—Ç—å —Å–≤–æ–µ –≤—Ä–µ–º—è", callback_data="time_custom"),
        ]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    message_thread_id = update.effective_message.message_thread_id if update.effective_message.is_topic_message else None
    topic_text = " –≤ —ç—Ç—É —Ç–µ–º—É" if message_thread_id else ""

    await update.message.reply_text(
        f"‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π{topic_text}:\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –≥–æ—Ç–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –∏–ª–∏ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–µ –≤—Ä–µ–º—è.",
        reply_markup=reply_markup
    )


async def time_button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    query = update.callback_query
    await query.answer()

    chat_id = update.effective_chat.id
    message_thread_id = update.effective_message.message_thread_id if update.effective_message.is_topic_message else None

    if query.data.startswith("time_preset_"):
        # –ì–æ—Ç–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
        time_range = query.data.replace("time_preset_", "")
        time_start, time_end = time_range.split("-")

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
        success = update_chat_time(chat_id, message_thread_id, time_start, time_end)

        if success:
            topic_text = " –≤ —ç—Ç—É —Ç–µ–º—É" if message_thread_id else ""
            await query.edit_message_text(
                f"‚úÖ –í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {time_start} - {time_end}\n\n"
                f"–°–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –≤ —ç—Ç–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ{topic_text}.\n\n"
                f"–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è: /settime"
            )
        else:
            await query.edit_message_text(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–æ–π /start"
            )

    elif query.data == "time_custom":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –≤—Ä–µ–º—è
        topic_text = " –≤ —ç—Ç—É —Ç–µ–º—É" if message_thread_id else ""
        await query.edit_message_text(
            f"‚è∞ –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏{topic_text}:\n\n"
            "–§–æ—Ä–º–∞—Ç: `/settime –ß–ß:–ú–ú` –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏\n"
            "–∏–ª–∏ `/settime –ß–ß:–ú–ú-–ß–ß:–ú–ú` –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "`/settime 09:30` - –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ 09:30\n"
            "`/settime 08:00-10:00` - —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è —Å 8:00 –¥–æ 10:00\n"
            "`/settime 22:00-02:00` - —Å 22:00 –¥–æ 02:00 (—á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å)",
            parse_mode='Markdown'
        )


async def set_time_custom(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    if not context.args:
        await update.message.reply_text(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è!\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "`/settime 09:30`\n"
            "`/settime 08:00-10:00`",
            parse_mode='Markdown'
        )
        return

    time_input = context.args[0]
    chat_id = update.effective_chat.id
    message_thread_id = update.effective_message.message_thread_id if update.effective_message.is_topic_message else None

    # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
    try:
        if '-' in time_input:
            # –î–∏–∞–ø–∞–∑–æ–Ω
            time_start, time_end = time_input.split('-')
        else:
            # –¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è
            time_start = time_end = time_input

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
        for t in [time_start, time_end]:
            hour, minute = map(int, t.split(':'))
            if not (0 <= hour <= 23 and 0 <= minute <= 59):
                raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è")

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
        success = update_chat_time(chat_id, message_thread_id, time_start, time_end)

        if success:
            topic_text = " –≤ —ç—Ç—É —Ç–µ–º—É" if message_thread_id else ""
            if time_start == time_end:
                await update.message.reply_text(
                    f"‚úÖ –í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {time_start}\n\n"
                    f"–°–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ {time_start}{topic_text}.\n\n"
                    f"–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è: /settime"
                )
            else:
                await update.message.reply_text(
                    f"‚úÖ –í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {time_start} - {time_end}\n\n"
                    f"–°–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –≤ —ç—Ç–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ{topic_text}.\n\n"
                    f"–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è: /settime"
                )
        else:
            await update.message.reply_text(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–æ–π /start"
            )

    except (ValueError, IndexError):
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú\n"
            "–ü—Ä–∏–º–µ—Ä—ã: `09:30` –∏–ª–∏ `08:00-10:00`",
            parse_mode='Markdown'
        )
