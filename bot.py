import os
import json
import random
from datetime import datetime, time
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import pytz

# –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
try:
    from dotenv import load_dotenv

    load_dotenv()
    USE_ENV = True
except ImportError:
    USE_ENV = False

# –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
BOT_TOKEN = os.getenv("BOT_TOKEN", "BOT_TOKEN")
TIMEZONE_STR = os.getenv("TIMEZONE", "Europe/Moscow")

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
CHATS_FILE = "chats.json"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
try:
    TIMEZONE = pytz.timezone(TIMEZONE_STR)
except pytz.exceptions.UnknownTimeZoneError:
    print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å '{TIMEZONE_STR}', –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Europe/Moscow")
    TIMEZONE = pytz.timezone('Europe/Moscow')


def load_chats():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open(CHATS_FILE, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return []


def save_chats(chats):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª"""
    with open(CHATS_FILE, 'w') as f:
        json.dump(chats, f, indent=2)


def add_chat(chat_id, chat_type, chat_title):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —á–∞—Ç –≤ —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç"""
    chats = load_chats()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —á–∞—Ç
    for chat in chats:
        if chat['id'] == chat_id:
            return False

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —á–∞—Ç
    chats.append({
        'id': chat_id,
        'type': chat_type,
        'title': chat_title,
        'added_at': datetime.now(TIMEZONE).isoformat()
    })
    save_chats(chats)
    return True


def remove_chat(chat_id):
    """–£–¥–∞–ª—è–µ—Ç —á–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞"""
    chats = load_chats()
    chats = [chat for chat in chats if chat['id'] != chat_id]
    save_chats(chats)


def days_until_new_year():
    """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –ù–æ–≤–æ–≥–æ –≥–æ–¥–∞"""
    now = datetime.now(TIMEZONE)
    current_year = now.year

    # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è 31 –¥–µ–∫–∞–±—Ä—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 0 –¥–Ω–µ–π
    new_year = datetime(current_year + 1, 1, 1, tzinfo=TIMEZONE)

    days_left = (new_year.date() - now.date()).days
    return days_left


def word_after_number(days: int) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    last_digit = days % 10
    last_two_digits = days % 100

    if last_digit == 1 and last_two_digits != 11:
        return '–¥–µ–Ω—å'
    elif last_digit in [2, 3, 4] and last_two_digits not in [12, 13, 14]:
        return '–¥–Ω—è'
    else:
        return '–¥–Ω–µ–π'


def countdown_message():
    """–°–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    days = days_until_new_year()
    word = word_after_number(days)
    if days == 0:
        message = "üéâ –° –ù–æ–≤—ã–º –ì–æ–¥–æ–º! üéä"
    elif days == 1:
        message = f"üéÑ –û—Å—Ç–∞–ª—Å—è –≤—Å–µ–≥–æ {days} {word} –¥–æ –ù–æ–≤–æ–≥–æ –≥–æ–¥–∞! üéÖ"
    elif days <= 4:
        message = f"üéÑ –û—Å—Ç–∞–ª–æ—Å—å {days} {word} –¥–æ –ù–æ–≤–æ–≥–æ –≥–æ–¥–∞! üéÖ"
    else:
        message = f"üéÑ –û—Å—Ç–∞–ª–æ—Å—å {days} {word} –¥–æ –ù–æ–≤–æ–≥–æ –≥–æ–¥–∞! üéÖ"
    return message


async def send_daily_message(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–Ω–µ–π –¥–æ –ù–ì –≤–æ –≤—Å–µ —á–∞—Ç—ã"""
    message = countdown_message()

    chats = load_chats()
    success_count = 0
    failed_chats = []

    for chat in chats:
        try:
            await context.bot.send_message(chat_id=chat['id'], text=message)
            success_count += 1
            print(f"[{datetime.now(TIMEZONE)}] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {chat['title']} ({chat['id']})")
        except Exception as e:
            print(f"[{datetime.now(TIMEZONE)}] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ {chat['title']} ({chat['id']}): {e}")
            failed_chats.append(chat['id'])

    # –£–¥–∞–ª—è–µ–º —á–∞—Ç—ã, –∫—É–¥–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å (–≤–æ–∑–º–æ–∂–Ω–æ –±–æ—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω)
    for chat_id in failed_chats:
        remove_chat(chat_id)

    print(f"[{datetime.now(TIMEZONE)}] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {success_count}/{len(chats)} —á–∞—Ç–æ–≤")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç —á–∞—Ç –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    days = days_until_new_year()
    chat_id = update.effective_chat.id
    chat_type = update.effective_chat.type
    chat_title = update.effective_chat.title if hasattr(update.effective_chat,
                                                        'title') else f"–õ–∏—á–Ω—ã–π —á–∞—Ç ({update.effective_user.first_name})"

    # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ —Å–ø–∏—Å–æ–∫
    is_new = add_chat(chat_id, chat_type, chat_title)

    # –õ–æ–≥–∏—Ä—É–µ–º
    print(
        f"[{datetime.now(TIMEZONE)}] /start –æ—Ç {chat_title} ({chat_id}, {chat_type}) - {'–Ω–æ–≤—ã–π —á–∞—Ç' if is_new else '—É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω'}")

    if is_new:
        message = (
            f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—é–¥–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –ù–æ–≤–æ–≥–æ –≥–æ–¥–∞.\n\n"
            f"–°–µ–π—á–∞—Å –¥–æ –ù–æ–≤–æ–≥–æ –≥–æ–¥–∞ –æ—Å—Ç–∞–ª–æ—Å—å: {days} {word_after_number(days)} üéÑ\n\n"
            f"–ö–æ–º–∞–Ω–¥—ã:\n"
            f"/check - —É–∑–Ω–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å\n"
            f"/stop - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
            f"/chatid - —É–∑–Ω–∞—Ç—å ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞"
        )
    else:
        message = (
            f"–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è! ‚úÖ\n\n"
            f"–î–æ –ù–æ–≤–æ–≥–æ –≥–æ–¥–∞ –æ—Å—Ç–∞–ª–æ—Å—å: {days} {word_after_number(days)} üéÑ\n\n"
            f"–ö–æ–º–∞–Ω–¥—ã:\n"
            f"/check - —É–∑–Ω–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å\n"
            f"/stop - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
        )

    if chat_type in ['group', 'supergroup']:
        message += "\n\nüìå –≠—Ç–æ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π."

    await update.message.reply_text(message)


async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop - –æ—Ç–ø–∏—Å—ã–≤–∞–µ—Ç —á–∞—Ç –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    chat_id = update.effective_chat.id
    chat_title = update.effective_chat.title if hasattr(update.effective_chat,
                                                        'title') else f"–õ–∏—á–Ω—ã–π —á–∞—Ç ({update.effective_user.first_name})"

    remove_chat(chat_id)

    print(f"[{datetime.now(TIMEZONE)}] /stop –æ—Ç {chat_title} ({chat_id})")

    await update.message.reply_text(
        "üò¢ –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.\n\n"
        "–ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start"
    )


async def check_now(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /check - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π"""
    message = countdown_message()

    await update.message.reply_text(message)


async def get_chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /chatid - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç ID —á–∞—Ç–∞"""
    chat_id = update.effective_chat.id
    chat_type = update.effective_chat.type
    chat_title = update.effective_chat.title if hasattr(update.effective_chat, 'title') else "–õ–∏—á–Ω—ã–π —á–∞—Ç"

    message = (
        f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:\n\n"
        f"Chat ID: `{chat_id}`\n"
        f"–¢–∏–ø: {chat_type}\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {chat_title}"
    )

    await update.message.reply_text(message, parse_mode='Markdown')


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
        print("–û–®–ò–ë–ö–ê: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å BOT_TOKEN!")
        print("–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ bot.py –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env")
        exit(1)

    chats = load_chats()

    print("=" * 50)
    print("üéÑ Telegram New Year Countdown Bot")
    print("=" * 50)
    print(f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {TIMEZONE_STR}")
    print(f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π –¥–æ –ù–æ–≤–æ–≥–æ –≥–æ–¥–∞: {days_until_new_year()}")
    print(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {'–∏–∑ .env —Ñ–∞–π–ª–∞' if USE_ENV else '–∏–∑ bot.py'}")
    print(f"–ü–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤: {len(chats)}")
    print("=" * 50)

    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("stop", stop))
    application.add_handler(CommandHandler("check", check_now))
    application.add_handler(CommandHandler("chatid", get_chat_id))

    # –ü–æ–ª—É—á–∞–µ–º job_queue –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á
    job_queue = application.job_queue

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –≤ 9:00 –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É
    job_queue.run_daily(
        send_daily_message,
        time=time(hour=12, minute=random.randint(0, 59), tzinfo=TIMEZONE),
        name="daily_countdown"
    )

    print("‚úì –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    # print("‚úì –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ 9:00")
    print("‚úì –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É /start")
    print("")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        application.run_polling(allowed_updates=Update.ALL_TYPES)
    except KeyboardInterrupt:
        print("\n\n–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n\n–û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()